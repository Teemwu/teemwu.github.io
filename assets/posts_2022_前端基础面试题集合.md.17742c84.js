import{_ as o,c as n,a as e,w as c,b as t,d as u,e as h,r as p,o as d}from"./app.a9cb80c7.js";const F=JSON.parse('{"title":"前端基础面试题集合","description":"","frontmatter":{"title":"前端基础面试题集合","author":"Teemwu","date":"2022/09/27 21:29","isPublished":true,"categories":["面试"],"tags":["题集"],"wordCount":2151},"headers":[{"level":1,"title":"前端基础面试题集合","slug":"前端基础面试题集合","link":"#前端基础面试题集合","children":[{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}]}],"relativePath":"posts/2022/前端基础面试题集合.md","lastUpdated":1677738557000}'),m={name:"posts/2022/前端基础面试题集合.md"},f=t("h1",{id:"前端基础面试题集合",tabindex:"-1"},[u("前端基础面试题集合 "),t("a",{class:"header-anchor",href:"#前端基础面试题集合","aria-hidden":"true"},"#")],-1),b=h('<ul><li>从输入一个 URL 地址到浏览器完成渲染的整个过程 <ol><li>浏览器解析出主机名</li><li>浏览器查询这个主机名的 IP 地址（DNS）</li><li>浏览器获得端口号</li><li>浏览器发起到 IP 为 xxx.xx.xx.x 端口 xx 的连接</li><li>浏览器向服务器发送一条 HTTP 报文</li><li>浏览器从服务器读取 HTTP 响应报文</li><li>浏览器关闭连接</li><li>浏览器解析请求到的数据资源</li><li>浏览器更新 DOM</li></ol></li></ul><iframe class="w-full h-[240px]" src="https://viewer.diagrams.net/?border=0&amp;highlight=1A1A1A&amp;edit=_blank&amp;layers=1&amp;nav=1&amp;title=Untitled%20Diagram.drawio&amp;lightbox=1&amp;chrome=0#R7Vpdd5s4EP01ekwOGIPh0Tg47W7as23SZvO0RwEF2MjIBTm2%2B%2Bs7AvFNbBzHdZLGL9YMwwjN3LkaYSNtMludx3gefGIeoWigeCuknaEBfHQNvoRmnWlMRSr8OPQylVoqLsOfRCoVqV2EHklqhpwxysN5XemyKCIur%2BlwHLNl3eyO0fqsc%2ByTluLSxbStvQ49HshVDEal%2FgMJ%2FSCfWTWs7MoM58ZyJUmAPbasqDQHaZOYMZ6NZqsJoSJ4eVyuP66v6cW9cf7Xl%2BQH%2Fmb%2FffX5%2B0nmbLrLLcUSYhLx53U9yFw%2FYLqQ8ZJr5es8gDFbRB4RThSk2QGfURiqMPyfcL6WCccLzkDFYh4wn0WYXjA2l3Z3LOLSTBUyibyxSCzIt5S595lqGlIq5wBJ2psgJTxm90XuhIMiEcKY4ltCbeze%2B%2BmDThhlMVyKWESEKw%2FAINdSPpxTau2esZU5SNgidskGO1kcHMc%2B2eTPyOzE81VwKjN3TtiM8HgNBjGhmIcPdTBjWRN%2BYVfmHQYy9TvAQGvDwDGR7SBLQ46OTB2N9W9fLzZgQ%2BRlGYScXM5xGqAl0EkdL1UcwFJtn%2BIkkVnckuTdkvRAYk5WG8OaXzXN7JaC3DJxWTKFmpd%2FUGGJoXKgRAw7EqEjS0Fj470w9ypMo2dh5vvW1sqUkMnh0btQpad%2FWAjrKk3Y3V0CD9YEUDHh0zFldGDKQDaU9VRU%2BXiEoAoEyiw0NsUlC5TTCu4MCgGzb2MY%2BWKU3jVFtp1ywxRZBnJGyJ5IthifCQ8ttAZsdrtIttNEDUQColM8C6mI9gdCHwgPXdxBJpiGfgSCC2ghcTc6Ycow8kEySukqrQaouwOSjFUnGXXUwTJKB8uYh2KZUSfdb00pDGwL2dklO0WNIS6Ni9tHKbJUZG5qI17nVnGi5syQp9E69mZhttL4mb3vEnvtEnmOt28Tas9tQsJHOdXgUwPQy985rBbAbuAo10TY9iS9agweDWGD3RoR9cXDKX%2FCjafN9zYhp4eu%2FeW3tgk5x%2FXtHE1kOmkPULQQujCwlbSp1OXAhIbBqfQSYADGWVMJncMknQKU6VzWVHQgb62XaB47h9qxW4mcbPq9CHqdUdeG9ahr6m%2BMujJ2F%2BHHq5s5GVz8%2BI9ff3IG05MOPtz3ZFbp1a1JetebOZm1Mt0XJI8iQj%2FiwawTEO%2Bvf4qeEfIar%2F8tZgbhRginei6eraoXz9Y19mg0TU%2Fr3zbVbM%2F3SI8fJ5XToao2dvyDdXClTV4%2FyggiWZvcaIA6i4S8bydXmtJwlQWr5QrQhtcVs7kwSDoWVszUIHCt9osHDDKPT21aO%2FPdPmSXRPynleQq5EVFwrhSkCCV9SiEA5Rj39e6j5ftEV7itkDc3HSeXHdNR32r7rkK45HTwR9ZGS9l0xm9GJQ3qLqYe%2Bfdxdji6NAo3%2Blg9CbBXdB%2BQfU3cprj0f6obxe278%2Fq%2FbhX1Z6JxNXm0eKZWqcTvf7jhWYpm5%2BreVa29mq1QCz%2FJ5OZl%2F820pxf"></iframe><ul><li><p>什么是事件代理（事件委托） 有什么好处</p><p>事件委托就是把元素响应事件的函数委托到另一个元素，通常委托给父级元素，利用事件的冒泡机制去触发父级绑定的事件，从而执行函数。亦可通过事件捕获来委托，但不常用。</p><p>冒泡委托好处：</p><ul><li>减少内存消耗</li><li>可动态绑定事件</li></ul><p>冒泡委托局限：</p><ul><li>focus、blur 等事件没有冒泡机制，无法委托</li><li>mousemove、mouseout 等事件，需要通过不断计算位置来定位，能耗高，不适合委托</li></ul></li><li><p>addEventListener 默认是捕获还是冒泡</p><p>默认是冒泡，需要改为捕获则需要修改第三个参数，改为 false</p></li><li><p>css 的渲染层合成是什么 浏览器如何创建新的渲染层</p></li><li><p>Webpack Plugin 和 Loader 的区别</p></li><li><p>apply call bind 区别</p><p>相同：</p><ul><li>都是通过函数调用</li><li>皆可改变函数 this 指向</li><li>第一个参数皆为 this 要指向的对象</li><li>第一个参数为 undefined 或 null 时都默认指向全局 window</li></ul><p>不同：</p><ul><li>apply 和 call 立即执行无并返回，bind 返回函数且需手动调用</li><li>call 和 bind 均可传多个参数，apply 只能传上下文 this 和参数数组</li></ul></li><li><p>举出闭包实际场景运用的例子</p></li><li><p>css 优先级是怎么计算的</p><p>根据选择器的优先级来进行计算。</p><p>!important &gt; inlineStyle &gt; id &gt; class(class, attribute and pseudo-class selector) &gt; Element(element and pseudo element selector) &gt; *</p></li><li><p>事件循环相关题目--必考（一般是代码输出顺序判断）</p></li><li><p>http 状态码 204 301 302 304 400 401 403 404 含义</p><ul><li>范围定义（200 ～ 599） <ul><li>表示成功：200 ~ 299</li><li>表示资源被移走：300 ～ 399</li><li>表示客户端请求出错：400 ～ 499</li><li>表示服务器出错：500 ～ 599</li></ul></li><li>常见状态 <ul><li>204: 请求成功但无需离开当前页面</li><li>301: 永久重定向，请求资源被转移指定 url 上</li><li>302: 请求资源被暂时转移到指定 url 上</li><li>304: 无需再次请求资源，可以使用缓存内容</li><li>400: 语法无效，服务端无法解析该请求的参数</li><li>401: 未授权，需要用户输入用户名和密码</li><li>404: 服务器无法找到 URL 的资源</li></ul></li></ul></li><li><p>http2.0 做了哪些改进 3.0 呢</p></li><li><p>http 与 https 有何差异</p><p>https 比 http 多了一层安全层（TSL or SSL）</p><iframe class="w-full h-[240px]" src="https://viewer.diagrams.net/?border=0&amp;highlight=0000ff&amp;edit=_blank&amp;layers=1&amp;nav=1&amp;title=HTTP&amp;open=R7Zldb5swFIZ%2FzbmMFGM%2BL4GQttIqVUumXVNwgc3giDhLsl8%2FE0wTYiq10hazJjfEfm0MeV58DjaAw3J3V8er%2FJGlhIIxTXeAZ2AYCLm2%2BGmUfas4Dm6FrC5S2ekoLIrfRIpTqW6KlKx7HTljlBervpiwqiIJ72lxXbNtv9sLo%2F2rruKMKMIiiamqfi9SnreqazhH%2FZ4UWd5dGdle21LGXWf5T9Z5nLLtiYQjwGHNGG9L5S4ktIHXcWnPm7%2FR%2BnpjNan4e074St1Jsp%2Bk9PH56S57sH98488Tox3lV0w38g%2FfL5dP8ob5vqNQs02VkmagKeBgmxecLFZx0rRuhe9Cy3lJRQ2JohyS1Jzs3rxX9EpAPDqElYTXe9GlO8GU0ORTYzmyvj16gDqw%2BQl%2FLLVY2p69Dn0kIwoSzgdAWQqoZTg%2BTjbSzclWOD2MEJOlG5OjYILIgWAGHjoUAvBCiGxwI%2FAtiCxw5%2BDj8YH0dIN01Xm5%2BCIEVovDoilqRmYic2ShzBtlKDvnpD%2BUdTcwrlimcNIeyxD6P4OZQlJ7MEMjfR1TYhjWTgoPPHMWBD54ZvPMiaPvHhQErqEAFCh4n9Ka1%2BwnCRkViQPPKlaJnsFLQemZFNMiq0Q1EeiI0IMGbCHWC75sKIs0bS4zaEvfuL%2FgjOGevyhbijPmgDHGPzPGHDDGhCAEfwqRC0EEHr5CY2yk2xh1BTMUpa%2FPGEu3MeqSqUmWnnBiesiaM%2FAjiLxm3ojZ08whB%2Fz5NVrlqVY5l7TKGM46wh7XO7zXWNeRdSxrZFnHuGWdQWO0Zx3jlnWGjdGddYxb1nmvVdqzztBm4RWudZSsg3XPIXXzcXC5%2FmkcQE7fAcdU9wEuOzXUvczGgcXntcDE3qUsENXj18lD28k3Xhz9AQ%3D%3D"></iframe></li><li><p>position 有哪些值，作用分别是什么</p><p>fixed、absolute、static、relative、inherit</p></li><li><p>垂直水平居中实现方式</p><p>块级元素：flex、margin + absolute、grid</p><p>行内元素：text-align + verical-align、flex、table、gride</p></li><li><p>vue 组件通讯方式有哪些方法</p><p>vue 组件通讯分为父子、子父、子子、祖孙，孙祖。</p><p>常用通讯方法有：</p><ul><li>vuex 状态管理</li><li>props、$emit</li><li>event-bus</li><li>provide、inject</li><li>$attrs、 $listeners</li><li>$refs、$parent、$children</li></ul></li><li><p>Vue 响应式原理</p><p>整体实现思路是通过数据劫持，使用观察者模式进行检测。通过拦截数据的 get 和 set，监听、改变数据。Vue 2.x 版本使用 Object.defineProperty 进行劫持，Vue 3.x 版本开始使用 Proxy 进行劫持。</p></li><li><p>Vue nextTick 原理</p><p>DOM 更新完毕后执行回调。使用微任务或者宏任务来完成事件调用的机制，让回调事件能在一个 eventloop 的最后执行。</p><p>参考：<a href="https://juejin.cn/post/6844903590293684231" target="_blank" rel="noreferrer">https://juejin.cn/post/6844903590293684231</a></p></li><li><p>Vue diff 原理</p><p>比较新旧树节点的差异，获得需要更新的节点。</p></li><li><p>路由原理 history 和 hash 两种路由方式的特点</p><p>history 模式的 url 中不需要带 # 号，hash 的需要。</p><p>history 模式需要服务器中配置请求指向，hash 无需。</p></li><li><p>手写 apply、call、bind</p><p>使用场景：</p><ul><li>自定义默认方法</li><li>兼容处理</li></ul><iframe class="w-full h-[240px]" src="https://gist.github.com/Teemwu/d771e7222853ba472799fb9247025e30.js"></iframe></li><li><p>手写 Promise.all 和 Promise.race（京东）</p><p>使用场景：</p><ul><li>Promise.all - 需要监测发起多个异步请求时，比如通过异步请求批量获取图片地址</li><li>Promise.race - 可以通过 Promise.race 来模拟异步请求的 timeout</li></ul><p><a href="https://gist.github.com/Teemwu/904bea9369decf3649ba86f63993bbab" target="_blank" rel="noreferrer">https://gist.github.com/Teemwu/904bea9369decf3649ba86f63993bbab</a></p></li><li><p>手写-实现一个寄生组合继承</p><p>基本思想：</p><p>为了解决组合继承的缺点，组合继承调用了两次父构造函数，生成了两个实例属性，只不过实例上覆盖了原型的属性。用了寄生组合式继承，将子类原型指向父类原型，一般用 Object.create() 和 Object.setPrototype()</p><p>缺点：</p><p>父类原型中的引用类型值会被所有下面的实例共享，一个改变，其它都变</p></li><li><p>手写-new 操作符</p><p><a href="https://gist.github.com/Teemwu/cdc87c6bbfc1054e4f2a06d11721af2d" target="_blank" rel="noreferrer">https://gist.github.com/Teemwu/cdc87c6bbfc1054e4f2a06d11721af2d</a></p></li><li><p>手写-setTimeout 模拟实现 setInterval</p><p>setInterval 缺点：</p><ol><li>在执行的时候可能会跳过指定时间间隔</li><li>多个定时器函数会立刻执行</li></ol><p>为什么要模拟：</p><ol><li>setTimeout 执行后会立刻将 fn 放入到消息队列中，而 setInterval 每次在放入之前都会判断消息队列中存不存在上一个任务。</li><li>setTimeout 的执行机制，也就是浏览器的事件循环机制，setTimeout 是一个宏任务，当js栈空了，就会依次执行宏任务。</li></ol><p><a href="https://gist.github.com/Teemwu/48fe604c10c525dcf33e24911150d20d" target="_blank" rel="noreferrer">https://gist.github.com/Teemwu/48fe604c10c525dcf33e24911150d20d</a></p></li><li><p>手写-发布订阅模式（字节）</p></li><li><p>手写-防抖节流（京东）</p></li><li><p>手写-将虚拟 Dom 转化为真实 Dom（类似的递归题-必考）</p><p><a href="https://gist.github.com/Teemwu/f0efc99986c68270e8a54ba8acfea2c3" target="_blank" rel="noreferrer">https://gist.github.com/Teemwu/f0efc99986c68270e8a54ba8acfea2c3</a></p></li><li><p>手写-实现一个对象的 flatten 方法（阿里）</p></li><li><p>手写-判断括号字符串是否有效（小米）</p></li><li><p>手写-查找数组公共前缀（美团）</p></li><li><p>手写-字符串最长的不重复子串</p></li><li><p>手写-如何找到数组中第一个没出现的最小正整数 怎么优化（字节）</p></li><li><p>手写-怎么在制定数据源里面生成一个长度为 n 的不重复随机数组 能有几种方法 时间复杂度多少（字节）</p><ul><li>去重后生成</li><li>生成时去重</li></ul></li><li><p>Webpack 有哪些优化手段</p></li><li><p>css 怎么开启硬件加速(GPU 加速)</p><p>可通过设置 <code>transform: transitionZ(0)</code> 等伪 3D 属性进行触发。</p></li><li><p>常用设计模式有哪些并举例使用场景</p></li><li><p>浏览器缓存策略是怎样的（强缓存 协商缓存）具体是什么过程？</p></li><li><p>https 加密过程是怎样的</p><ul><li>客户端请求服务器获取证书公钥</li><li>客户端（SSL/TLS）解析证书（无效则弹窗警告）</li><li>生成随机值</li><li>用公钥加密随机值生成密钥</li><li>客户端将密钥发送给服务器</li><li>服务端用私钥解密密钥得到随机值</li><li>将信息和随机值混合在一起进行对称加密</li><li>将加密的内容发送给客户端</li><li>客户端用密钥解密信息</li></ul></li><li><p>flex: 1 是哪些属性组成的</p><ul><li>flex-grow: 1</li><li>flex-shrink: 1</li><li>flex-basis: 0%</li></ul></li><li><p>304 是什么意思 一般什么场景出现 ，命中强缓存返回什么状态码</p></li><li><p>手写 Vue.extend 实现</p></li><li><p>vue-router 中路由方法 pushState 和 replaceState 能否触发 popSate 事件</p></li><li><p>tree shaking 是什么，原理是什么</p></li><li><p>babel 是什么，原理了解吗</p></li><li><p>原型链判断</p></li><li><p>RAF 和 RIC 是什么</p></li><li><p>Es6 的 let 实现原理</p><p>编译阶段会记录块级作用域中的 let 变量声明，将其写入特定的栈中，词法执行前对应的块级作用域会依次出栈。可通过 <code>闭包</code> 和函数作用域来实现块级作用域的效果。</p></li><li><p>如何设计实现一个渲染引擎</p><p>需要了解浏览器的页面渲染机制。HTML/SVG/XHTML 的解析，CSS 解析，Javascript 脚本的执行。</p></li><li><p>require 具体实现原理是什么</p></li><li><p>前端性能定位以及优化指标</p></li><li><p>HTTP 请求中 HEAD 和 PUT 方法理解</p><p>HEAD：和 GET 方法行为类似，而 HEAD 请求服务器只返回首部，常用来检测超链接是否有效</p><p>PUT：向服务器写入或替换文档，请求前常需要密码登录验证，可用来对博客文章的更新</p></li></ul><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-hidden="true">#</a></h2><p><a href="https://juejin.cn/post/7004638318843412493" target="_blank" rel="noreferrer">https://juejin.cn/post/7004638318843412493</a></p><p><a href="https://zhuanlan.zhihu.com/p/160315811" target="_blank" rel="noreferrer">https://zhuanlan.zhihu.com/p/160315811</a></p>',6);function g(l,i,T,w,x,S){const a=p("articleMeta"),r=p("ClientOnly");return d(),n("div",null,[f,e(r,null,{default:c(()=>[e(a,{modelValue:l.$frontmatter,"onUpdate:modelValue":i[0]||(i[0]=s=>l.$frontmatter=s)},null,8,["modelValue"])]),_:1}),b])}const G=o(m,[["render",g]]);export{F as __pageData,G as default};
