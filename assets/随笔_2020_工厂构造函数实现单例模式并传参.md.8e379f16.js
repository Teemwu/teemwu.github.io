import{_ as t,c,b as a,w as r,d as l,e as C,a as A,r as i,o as y,f as D}from"./app.b1135bc7.js";const b=JSON.parse('{"title":"工厂构造函数实现单例模式并传参","description":"","frontmatter":{"title":"工厂构造函数实现单例模式并传参","author":"teemwu","date":"2020/04/16 22:02","isPublished":true,"categories":["Flutter","Dart"],"tags":null,"wordCount":170},"headers":[{"level":1,"title":"工厂构造函数实现单例模式并传参","slug":"工厂构造函数实现单例模式并传参","link":"#工厂构造函数实现单例模式并传参","children":[{"level":3,"title":"参考","slug":"参考","link":"#参考","children":[]}]}],"relativePath":"随笔/2020/工厂构造函数实现单例模式并传参.md","lastUpdated":1674872875000}'),F={name:"随笔/2020/工厂构造函数实现单例模式并传参.md"},_=l("h1",{id:"工厂构造函数实现单例模式并传参",tabindex:"-1"},[C("工厂构造函数实现单例模式并传参 "),l("a",{class:"header-anchor",href:"#工厂构造函数实现单例模式并传参","aria-hidden":"true"},"#")],-1),d=A(`<p>Flutter 封装请求方法类时使用了工厂构造函数的单例模式，在调试时为了按需控制请求打印日志，最好的方法就是往请求体中传参数控制，可是想了好久都不晓得怎么个传参法，后来查看 GitHub 时得到了解决方法，具体如下。</p><div class="language-dart"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">NetUtil</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">final</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">NetUtil</span><span style="color:#A6ACCD;"> _instance </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">NetUtil</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">_internal</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">bool</span><span style="color:#A6ACCD;"> showLog </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">false;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">factory</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">NetUtil</span><span style="color:#A6ACCD;">([</span><span style="color:#FFCB6B;">bool</span><span style="color:#A6ACCD;"> isShowLog </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">false</span><span style="color:#A6ACCD;">]) {</span></span>
<span class="line"><span style="color:#A6ACCD;">    showLog </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> isShowLog</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> _instance</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">NetUtil</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">_internal</span><span style="color:#A6ACCD;">() {</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (showLog) {</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#676E95;font-style:italic;">// 省略无关代码</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">Future</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">get</span><span style="color:#A6ACCD;">(</span><span style="color:#FFCB6B;">String</span><span style="color:#A6ACCD;"> url) </span><span style="color:#89DDFF;font-style:italic;">async</span><span style="color:#A6ACCD;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">Future</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">post</span><span style="color:#A6ACCD;">(</span><span style="color:#FFCB6B;">String</span><span style="color:#A6ACCD;"> url) </span><span style="color:#89DDFF;font-style:italic;">async</span><span style="color:#A6ACCD;"> {}</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">main</span><span style="color:#A6ACCD;">() {</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// 调用</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">NetUtil</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">true</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#A6ACCD;">(</span><span style="color:#C3E88D;">&#39;&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-hidden="true">#</a></h3><p><a href="https://gist.github.com/theburningmonk/6401183#gistcomment-2903680" target="_blank" rel="noreferrer">https://gist.github.com/theburningmonk/6401183#gistcomment-2903680</a></p>`,4);function u(s,n,h,g,m,B){const o=D,p=i("ClientOnly");return y(),c("div",null,[_,a(p,null,{default:r(()=>[a(o,{modelValue:s.$frontmatter,"onUpdate:modelValue":n[0]||(n[0]=e=>s.$frontmatter=e)},null,8,["modelValue"])]),_:1}),d])}const N=t(F,[["render",u]]);export{b as __pageData,N as default};
